import pylab as pl
import pickle
import numpy as np
import network_simulation_freeze_stop as net_sims
import pandas as pd
import os
import time
import pdb
import glob
import gc
import multiprocessing
import ray
import backend as back
from itertools import combinations

def start_sim(j,sol,new_params,params_to_fit,address):
   

comb = combinations(solutions_onset, solutions_duration)    
for i in np.arange(len(solutions_onset)):
    if i < offset:
        continue
    print("i:",i)

    onset = solutions_onset[i]

    for j in np.arange(len(solutions_duration)):

        print("j:", j) 

        seed_1 = i
        seed_2 = j

        duration = solutions_duration[j]

        if os.path.exists(data_dir+'network_data_onset_'+str(onset)+'_duration_'+str(duration)):
            continue

        new_env = environment.copy()
        new_env['stop_signal_onset'] = onset
        new_env['stop_2_signal_onset'] = onset
        new_env['opt_signal_onset'] = onset

        new_env['stop_signal_duration'] = duration
        new_env['stop_2_signal_duration'] = duration
        new_env['opt_signal_duration'] = duration

        print('Onset:', onset)
        print('Duration:', duration)

        results = net_sims.run_simulation(seed_1, seed_2, onset, duration, new_env)